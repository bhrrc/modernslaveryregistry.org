AWSTemplateFormatVersion: 2010-09-09
Description: A Ruby on Rails web application deployed to Amazon EC2.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Application
        Parameters:
          - ProjectId
Outputs:
  LoadBalancerURL:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - ApplicationLoadBalancer
          - DNSName
    Description: URL for newly created Rails application
  ApplicationServerURL:
    Description: URL for the working Ruby on Rails web application
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - WebApp01
          - PublicDnsName
        - /
Parameters:
  AppName:
    Description: Name of the application.
    MaxLength: 100
    MinLength: 1
    Type: String
  InstanceType:
    Default: t2.medium
    Description: The Amazon EC2 instance type to use.
    Type: String
  KeyPairName:
    Description: >-
      The name of the key pair used to make SSH connections to Amazon EC2
      instances.
    Type: 'AWS::EC2::KeyPair::KeyName'
  ProjectId:
    AllowedPattern: '^[a-z]([a-z0-9-])+$'
    ConstraintDescription: >-
      Project IDs must be between 2 and 15 characters, begin with a letter, and
      only contain lowercase letters, numbers, and hyphens (-).
    Description: Project ID.
    MaxLength: 15
    MinLength: 2
    Type: String
  RepositoryName:
    Description: AWS CodeCommit repository name.
    MaxLength: 100
    MinLength: 1
    Type: String
  SubnetId:
    Description: >-
      The name of the VPC subnet to use for Amazon EC2 instances launched for
      this project.
    Type: 'AWS::EC2::Subnet::Id'
  Subnets:
    Description: Subnets that the loadbalancer is in
    Type: 'List<AWS::EC2::Subnet::Id>'
  VpcId:
    Description: >-
      The ID of the Amazon Virtual Private Cloud (VPC) to use for Amazon EC2
      instances.
    Type: 'AWS::EC2::VPC::Id'
  ALBCertificateArn:
    Description: >-
      The ARN for the SSL certificate
    Type: String
  SSHLocation:
    Description: ' The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Resources:
  CodeCommitRepo:
    Description: Code repository
    Properties:
      RepositoryDescription: !Join
        - ''
        - - !Ref ProjectId
          - ' project repository'
      RepositoryName: !Ref RepositoryName
    Type: 'AWS::CodeCommit::Repository'
  CodeDeployApplication:
    Description: Configuring AWS CodeDeploy for project application
    Properties:
      ApplicationName: !Ref ProjectId
    Type: 'AWS::CodeDeploy::Application'
  CodeDeployTrustRole:
    Description: Creating service role in IAM for AWS CodeDeploy
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Sid: ''
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeInstanceStatus'
                Effect: Allow
                Resource:
                  - '*'
          PolicyName: CodeStarWorkerCodeDeployPolicy
      RoleName: !Join
        - '-'
        - - CodeStarWorker
          - !Ref ProjectId
          - CodeDeploy
    Type: 'AWS::IAM::Role'
  CodePipelineTrustRole:
    Description: Creating service role in IAM for AWS CodePipeline
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Sid: 1
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                  - 's3:PutObject'
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref S3Bucket
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref S3Bucket
                      - /*
              - Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Effect: Allow
                Resource:
                  - !Join
                    - ':'
                    - - arn
                      - aws
                      - codecommit
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - !Ref RepositoryName
              - Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Effect: Allow
                Resource:
                  - !Join
                    - ':'
                    - - arn
                      - aws
                      - codedeploy
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - application
                      - !Ref CodeDeployApplication
                  - !Join
                    - ':'
                    - - arn
                      - aws
                      - codedeploy
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - deploymentgroup
                      - !Join
                        - /
                        - - !Ref CodeDeployApplication
                          - !Ref DeploymentGroup
                  - !Join
                    - ':'
                    - - arn
                      - aws
                      - codedeploy
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - deploymentconfig
                      - '*'
                  - !Ref 'AWS::NoValue'
          PolicyName: CodeStarWorkerCodePipelinePolicy
      RoleName: !Join
        - '-'
        - - CodeStarWorker
          - !Ref ProjectId
          - CodePipeline
    Type: 'AWS::IAM::Role'
  DeploymentGroup:
    DependsOn:
      - WebApp01
    Description: Creating AWS CodeDeploy deployment groups for project application
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      DeploymentGroupName: !Join
        - ''
        - - !Ref ProjectId
          - '-Env'
      Ec2TagFilters:
        - Key: Environment
          Type: KEY_AND_VALUE
          Value: !Join
            - ''
            - - !Ref ProjectId
              - '-WebApp'
      ServiceRoleArn: !GetAtt
        - CodeDeployTrustRole
        - Arn
    Type: 'AWS::CodeDeploy::DeploymentGroup'
  ProjectPipeline:
    DependsOn:
      - CodeDeployApplication
      - CodePipelineTrustRole
      - S3Bucket
    Description: Creating a deployment pipeline for your project in AWS CodePipeline
    Properties:
      ArtifactStore:
        Location: !Join
          - '-'
          - - aws
            - codestar
            - !Ref 'AWS::Region'
            - !Ref 'AWS::AccountId'
            - !Ref ProjectId
            - pipe
        Type: S3
      Name: !Join
        - '-'
        - - !Ref ProjectId
          - Pipeline
      RoleArn: !GetAtt
        - CodePipelineTrustRole
        - Arn
      Stages:
        - Actions:
            - ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                BranchName: master
                PollForSourceChanges: false
                RepositoryName: !Ref RepositoryName
              InputArtifacts: []
              Name: ApplicationSource
              OutputArtifacts:
                - Name: !Join
                    - '-'
                    - - !Ref ProjectId
                      - SourceArtifact
              RunOrder: 1
          Name: Source
        - Actions:
            - ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref DeploymentGroup
              InputArtifacts:
                - Name: !Join
                    - '-'
                    - - !Ref ProjectId
                      - SourceArtifact
              Name: Deploy
              RunOrder: 1
          Name: Application
    Type: 'AWS::CodePipeline::Pipeline'
  S3ArtifactBucketPolicy:
    Description: Setting Amazon S3 bucket policy for AWS CodePipeline access
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Id: SSEAndSSLPolicy
        Statement:
          - Action: 's3:PutObject'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
            Effect: Deny
            Principal: '*'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
                  - /*
            Sid: DenyUnEncryptedObjectUploads
          - Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:GetBucketVersioning'
            Condition:
              Bool:
                'aws:SecureTransport': false
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt
                  - CodeDeployTrustRole
                  - Arn
                - !GetAtt
                  - CodePipelineTrustRole
                  - Arn
                - !GetAtt
                  - WebAppRole
                  - Arn
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
                  - /*
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
            Sid: OnlyCodePipelineGet
          - Action:
              - 's3:PutObject'
            Condition:
              Bool:
                'aws:SecureTransport': true
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt
                  - CodeDeployTrustRole
                  - Arn
                - !GetAtt
                  - CodePipelineTrustRole
                  - Arn
                - !GetAtt
                  - WebAppRole
                  - Arn
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
                  - /*
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
            Sid: OnlyCodePipelinePut
        Version: 2012-10-17
    Type: 'AWS::S3::BucketPolicy'
  S3Bucket:
    DeletionPolicy: Retain
    Description: Creating Amazon S3 bucket for AWS CodePipeline artifacts
    Properties:
      BucketName: !Join
        - '-'
        - - aws
          - codestar
          - !Ref 'AWS::Region'
          - !Ref 'AWS::AccountId'
          - !Ref ProjectId
          - pipe
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref ProjectId
              - S3Bucket
      VersioningConfiguration:
        Status: Enabled
    Type: 'AWS::S3::Bucket'
  SourceEvent:
    Properties:
      Description: >-
        Rule for Amazon CloudWatch Events to detect changes to the source
        repository and trigger pipeline execution
      EventPattern:
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceName:
            - master
          referenceType:
            - branch
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !GetAtt CodeCommitRepo.Arn
        source:
          - aws.codecommit
      Name: !Join
        - '-'
        - - awscodestar
          - !Ref ProjectId
          - SourceEvent
      State: ENABLED
      Targets:
        - Arn: !Join
            - ':'
            - - arn
              - aws
              - codepipeline
              - !Ref 'AWS::Region'
              - !Ref 'AWS::AccountId'
              - !Join
                - '-'
                - - !Ref ProjectId
                  - Pipeline
          Id: ProjectPipelineTarget
          RoleArn: !GetAtt SourceEventRole.Arn
    Type: 'AWS::Events::Rule'
  SourceEventRole:
    Description: >-
      IAM role to allow Amazon CloudWatch Events to trigger AWS CodePipeline
      execution
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Sid: 1
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'codepipeline:StartPipelineExecution'
                Effect: Allow
                Resource:
                  - !Join
                    - ':'
                    - - arn
                      - aws
                      - codepipeline
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - !Join
                        - '-'
                        - - !Ref ProjectId
                          - Pipeline
          PolicyName: CodeStarWorkerCloudWatchEventPolicy
      RoleName: !Join
        - '-'
        - - CodeStarWorker
          - !Ref ProjectId
          - CloudWatchEventRule
    Type: 'AWS::IAM::Role'
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref ALBSecurityGroup
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBHttpsListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
        - CertificateArn: !Ref ALBCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '443'
      Protocol: HTTPS
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 120
      HealthCheckTimeoutSeconds: 60 
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VpcId
      Targets:
      - Id: !Ref WebApp01
        Port: 3000 
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: (modern-slavery) enable HTTP access for load balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref VpcId
  WebApp01:
    Description: Creating Amazon EC2 instances
    Properties:
      IamInstanceProfile: !Ref WebAppInstanceProfile
      ImageId: ami-58d7e821
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref WebServerSecurityGroup
          SubnetId: !Ref SubnetId
      Tags:
        - Key: Environment
          Value: !Join
            - ''
            - - !Ref ProjectId
              - '-WebApp'
        - Key: Name
          Value: !Join
            - ''
            - - !Ref ProjectId
              - '-WebApp'
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -ex
            - |
              apt-get update
            - |
              apt-get -y install ruby
            - |
              apt-get -y install wget
            - |
              # Install the AWS CodeDeploy Agent.
            - |
              cd /home/ubuntu/
            - 'wget https://aws-codedeploy-'
            - !Ref 'AWS::Region'
            - |
              .s3.amazonaws.com/latest/install
            - |
              chmod +x ./install 
            - |
              ./install auto
            - |
              service codedeploy-agent start
            - |
              apt-get -y install python-pip 
            - |
              pip install awscli
    Type: 'AWS::EC2::Instance'
  WebAppInstanceProfile:
    Description: Creating Amazon EC2 instance profile for instances
    Properties:
      Path: /
      Roles:
        - !Ref WebAppRole
    Type: 'AWS::IAM::InstanceProfile'
  WebAppRole:
    Description: Creating service role in IAM for Amazon EC2 instances
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Sid: ''
      Path: /
      RoleName: !Join
        - '-'
        - - CodeStarWorker
          - !Ref ProjectId
          - WebApp
    Type: 'AWS::IAM::Role'
  WebAppRolePolicies:
    Description: Setting IAM policy for service role for Amazon EC2 instances
    Properties:
      PolicyDocument:
        Statement:
          - Action:
            - 'ssm:DescribeParameters'
            Effect: Allow
            Resource:
              - '*'
          - Action:
            - 'ssm:GetParameters'
            Effect: Allow
            Resource:
              - !Join
                - ':'
                - - arn
                  - aws
                  - ssm
                  - !Ref 'AWS::Region'
                  - !Ref 'AWS::AccountId'
                  - 'parameter/ms-*'
          - Action:
            - 'kms:Decrypt'
            Effect: Allow
            Resource:
              - !Join
                - ':'
                - - arn
                  - aws
                  - kms
                  - !Ref 'AWS::Region'
                  - !Ref 'AWS::AccountId'
                  - 'alias/aws/ssm'
          - Action:
              - 'ec2:Describe*'
            Effect: Allow
            Resource: '*'
          - Action:
              - 's3:Get*'
              - 's3:List*'
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Join
                    - '-'
                    - - aws-codedeploy
                      - !Ref 'AWS::Region'
                  - '*'
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
                  - /*
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Join
                    - '-'
                    - - aws
                      - codestar
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                  - !Join
                    - /
                    - - ''
                      - !Ref ProjectId
                      - ssh/*
              - 'arn:aws:s3:::awscodestar-remote-access-signatures-eu-west-1/*'
              - 'arn:aws:s3:::awscodestar-remote-access-eu-west-1/*'
          - Action:
              - 'cloudformation:DescribeStackResources'
            Effect: Allow
            Resource:
              - !Ref 'AWS::StackId'
          - Action:
              - 'codedeploy:BatchGet*'
              - 'codedeploy:Get*'
              - 'codedeploy:List*'
            Effect: Allow
            Resource:
              - !Join
                - ':'
                - - arn
                  - aws
                  - codedeploy
                  - !Ref 'AWS::Region'
                  - !Ref 'AWS::AccountId'
                  - application
                  - !Ref CodeDeployApplication
              - !Join
                - ':'
                - - arn
                  - aws
                  - codedeploy
                  - !Ref 'AWS::Region'
                  - !Ref 'AWS::AccountId'
                  - deploymentgroup
                  - !Join
                    - /
                    - - !Ref CodeDeployApplication
                      - !Ref DeploymentGroup
              - !Join
                - ':'
                - - arn
                  - aws
                  - codedeploy
                  - !Ref 'AWS::Region'
                  - !Ref 'AWS::AccountId'
                  - deploymentconfig
                  - '*'
      PolicyName: CodeStarWorkerBackendPolicy
      Roles:
        - !Ref WebAppRole
    Type: 'AWS::IAM::Policy'
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access locked down to the load balancer + SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          SourceSecurityGroupId: !Select
            - 0
            - !GetAtt
              - ApplicationLoadBalancer
              - SecurityGroups
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      VpcId: !Ref VpcId
