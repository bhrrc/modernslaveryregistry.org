#!/usr/bin/env ruby
#
# This script imports statements from CSV into the database.
# It should be run *AFTER* running ./import-countries
#
# Usage: ./bin/rails runner script/import_statements PATH_TO_CSV
#
require 'csv'

class NilClass
  def strip
    nil
  end
end

def date_seen(ds)
  return nil if ds.nil? # TODO: use prev date
  ds = '12/20/16' if ds == '12/202/16'
  if ds.strip
    begin
      Date.strptime(ds, "%d/%m/%y")
    rescue
      Date.strptime(ds, "%m/%d/%y")
    end
  else
    nil
  end
end

def yes_no_bool(s)
  return false if s.nil?
  !!(s =~ /yes/i)
end

def signed_by(s)
  return nil if s.nil?
  s.strip
end

def statement_approved_by_board(s)
  return nil if s.nil?
  s = s.strip
  s = 'Yes' if s == 'yes'
  s
end

def approved_by(s)
  return nil if s.nil?
  s = s.strip
  s = 'Group CEO on behalf of Board' if s == 'Group CEO o nbehalf of Board'
  s = 'Board of Trustees' if s == 'Boad of Trustees'
  s
end

filename = ARGV[0]
puts "There are #{Sector.count} sectors in the database."
puts "There are #{Company.count} companies in the database."
puts "There are #{Statement.count} statements in the database."
puts "Importing..."
stms = []
CSV.foreach(filename, :headers => true) do |row|
  country_name = row['COUNTRY OF HQ OF CO. PROVIDING STATEMENT'].strip
  country_name = "United Kingdom" if country_name == "UK"
  country_name = "United Kingdom" if country_name == "Uk"
  country_name = "United States" if country_name == "USA"
  country_name = "United Arab Emirates" if country_name == "UAE"
  country_name = "United Arab Emirates" if country_name == "Dubai"
  country_name = "South Africa" if country_name == "S. Africa"
  country = Country.find_by_name(country_name)

  sector_params = {name: row['SECTOR'].strip}
  sector = Sector.find_or_create_by!(sector_params)

  company_params = {
    name: row['COMPANY'],
    country_id: country.id,
    sector_id: sector.id
  }
  company = Company.find_or_create_by!(company_params)

  statement_params = {
    url: row[' STATEMENT'].strip,
    date_seen: date_seen(row['DATE SEEN']),
    approved_by_board: statement_approved_by_board(row['STATEMENT APPROVED BY BOARD/MEMBER/PARTNER 54(6)(a-d)']),
    approved_by: approved_by(row['WHO APPROVED']),
    signed_by_director: yes_no_bool(row['STATEMENT SIGNED BY DIRECTOR/MEMBER/PARTNER 54(6)(a-d)']),
    signed_by: signed_by(row['Title of person who signed']),
    link_on_front_page: yes_no_bool(row['LINK TO STATEMENT ON HOMEPAGE OF WEBSITE 54(7)(b)']),
    linked_from: row['IF NOT ON HOMEPAGE, LOCATION OF LINK ON WEBSITE'].strip,

    company_id: company.id
  }
  Statement.find_or_create_by!(statement_params)
end

puts "There are #{Sector.count} sectors in the database."
puts "There are #{Company.count} companies in the database."
puts "There are #{Statement.count} statements in the database."

# puts '--'
# puts stms.map{|s| s[:statement_approved_by_board]}.uniq
# puts '--'
# puts stms.map{|s| s[:approved_by]}.uniq
# puts '--'

# Look for inconsistencies

# weird_approvers = []
# puts "----- Weird approvers -----"
# stms.each do |s|
#   if(s[:statement_approved_by_board].nil? || s[:statement_approved_by_board] == 'No')
# #    p s[:approved_by]
#   end
#
#   if(s[:statement_approved_by_board] == 'Yes' && !(s[:approved_by] =~ /Board/i))
#     weird_approvers << s[:approved_by]
#   end
# end
#
# puts weird_approvers.compact.uniq.sort
